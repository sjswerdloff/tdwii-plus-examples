# Partially Generated by CodiumAI, fixed up, added to, and parameterized by SJS
import pytest
from pydicom import Dataset, uid

from tdwii_plus_examples.rtbdi_creator.rtbdi_factory import (
    is_tx_record_for_bdi,
    is_tx_record_for_plan,
)


class TestIsTxRecordForPlan:
    # Given a valid tx_rec_ds and plan, the function returns True
    @pytest.mark.parametrize(
        "plan_uid, ref_plan_uid, beam_number, ref_beam_number, plan_sop_class, tx_rec_sop_class, expected",
        [
            ("1.2.3.4", "1.2.3.4", 1, 1, uid.RTPlanStorage, uid.RTBeamsTreatmentRecordStorage, True),
            ("1.2.3.4", "1.2.3.4", 1, 1, uid.RTPlanStorage, uid.RTIonBeamsTreatmentRecordStorage, False),
            ("1.2.3.4", "1.2.3.4", 1, 1, uid.RTIonPlanStorage, uid.RTBeamsTreatmentRecordStorage, False),
            ("1.2.3.4", "1.2.3.4", 1, 1, uid.RTIonPlanStorage, uid.RTIonBeamsTreatmentRecordStorage, True),
            ("1.2.3.4", "1.2.3.4", 1, 2, uid.RTIonPlanStorage, uid.RTIonBeamsTreatmentRecordStorage, False),
            ("1.2.3.4", "1.2.3.4.5", 1, 1, uid.RTIonPlanStorage, uid.RTIonBeamsTreatmentRecordStorage, False),
            pytest.param(
                "1.2.3.4",
                "1.2.3.4.5",
                1,
                1,
                uid.RTIonPlanStorage,
                uid.RTIonBeamsTreatmentRecordStorage,
                True,
                marks=pytest.mark.xfail,
            ),
        ],
    )
    def test_valid_tx_rec_ds_and_plan(
        self, plan_uid, ref_plan_uid, beam_number, ref_beam_number, plan_sop_class, tx_rec_sop_class, expected
    ):
        """Test that the plan SOP Instance UID and Beam Number match the
        Referenced SOP Instance UID and Referenced Beam Number in the treatment record
        """
        # Create a valid tx_rec_ds and plan
        tx_rec_ds = Dataset()
        tx_rec_ds.SOPClassUID = tx_rec_sop_class
        tx_rec_ds.ReferencedRTPlanSequence = [Dataset()]
        tx_rec_ds.ReferencedRTPlanSequence[0].ReferencedSOPInstanceUID = ref_plan_uid
        if tx_rec_sop_class == uid.RTIonBeamsTreatmentRecordStorage:
            tx_rec_ds.TreatmentSessionIonBeamSequence = [Dataset()]
            tx_rec_ds.TreatmentSessionIonBeamSequence[0].ReferencedBeamNumber = ref_beam_number
        elif tx_rec_sop_class == uid.RTBeamsTreatmentRecordStorage:
            tx_rec_ds.TreatmentSessionBeamSequence = [Dataset()]
            tx_rec_ds.TreatmentSessionBeamSequence[0].ReferencedBeamNumber = ref_beam_number

        plan = Dataset()
        plan.SOPClassUID = plan_sop_class
        plan.SOPInstanceUID = plan_uid
        if plan_sop_class == uid.RTIonPlanStorage:
            plan.IonBeamSequence = [Dataset()]
            plan.IonBeamSequence[0].BeamNumber = beam_number
        elif plan_sop_class == uid.RTPlanStorage:
            plan.BeamSequence = [Dataset()]
            plan.BeamSequence[0].BeamNumber = beam_number

        # Call the function under test
        result = is_tx_record_for_plan(tx_rec_ds, plan)

        # Check the result
        assert result == expected

    # Given a tx_rec_ds with no ReferencedRTPlanSequence, the function returns False
    def test_tx_rec_ds_with_no_ReferencedRTPlanSequence(self):
        # Create a tx_rec_ds with no ReferencedRTPlanSequence
        tx_rec_ds = Dataset()

        plan = Dataset()

        # Call the function under test
        result = is_tx_record_for_plan(tx_rec_ds, plan)

        # Check the result
        assert result is False


class TestIsTxRecordForBdi:
    # Returns True when tx_rec_ds is an ion beam treatment record and all current fraction numbers
    # in tx_rec_ds are present in bdi
    @pytest.mark.parametrize(
        "first_ts_fraction_number, second_ts_fraction_number,first_bdi_fraction_number, second_bdi_fraction_number, expected",
        [(1, 2, 1, 2, True), (1, 2, 1, 1, False), (1, 1, 1, 2, True)],
    )
    def test_ion_beam_all_fraction_numbers_present(
        self,
        first_ts_fraction_number,
        second_ts_fraction_number,
        first_bdi_fraction_number,
        second_bdi_fraction_number,
        expected,
    ):
        """Returns True when tx_rec_ds is an ion beam treatment record and all current fraction numbers
        in tx_rec_ds are present in bdi

        Args:
            first_ts_fraction_number (_type_): _description_
            second_ts_fraction_number (_type_): _description_
            first_bdi_fraction_number (_type_): _description_
            second_bdi_fraction_number (_type_): _description_
            expected (_type_): _description_
        """
        tx_rec_ds = Dataset()
        tx_rec_ds.SOPClassUID = uid.RTIonBeamsTreatmentRecordStorage
        tx_rec_ds.TreatmentSessionIonBeamSequence = [Dataset(), Dataset()]
        tx_rec_ds.TreatmentSessionIonBeamSequence[0].CurrentFractionNumber = first_ts_fraction_number
        tx_rec_ds.TreatmentSessionIonBeamSequence[1].CurrentFractionNumber = second_ts_fraction_number
        bdi = Dataset()
        bdi.BeamTaskSequence = [Dataset(), Dataset()]
        bdi.BeamTaskSequence[0].CurrentFractionNumber = first_bdi_fraction_number
        bdi.BeamTaskSequence[1].CurrentFractionNumber = second_bdi_fraction_number
        assert is_tx_record_for_bdi(tx_rec_ds, bdi) == expected

    # Returns False when tx_rec_ds is None
    def test_tx_rec_ds_is_none(self):
        tx_rec_ds = None
        bdi = Dataset()
        bdi.BeamTaskSequence = [Dataset(), Dataset()]
        bdi.BeamTaskSequence[0].CurrentFractionNumber = 1
        bdi.BeamTaskSequence[1].CurrentFractionNumber = 2

        assert is_tx_record_for_bdi(tx_rec_ds, bdi) is False
